#include <AccelStepper.h> //Stepepr library

//For Stepper Drives
#define enPin 8 //enable
#define home_switchX 9 //Define the homeswitch on X axis Pin 9
#define home_switchY 10 //Define the homeswitch on Y axis to Pin 10

//For DC Motor Shield
#define IN1 12  //Plugged Into - Spindle Enable
#define IN2 13  //Plugged Into - Splindle Directon
#define ENA 11 //Plugged Into - Z Limit - PWM Pin

//#define StartCycle A1

const int sandtime = 5000; //time spenting sanding jar 
const int loadtime = 5000; //time to load jar  //soon to change to switch 
const int sand = 1000;

long initial_homingX = 1; 
long initial_homingY = -1;

AccelStepper Xaxis(1, 2, 5);               // pin 2 = step, pin 5 = direction
AccelStepper Yaxis(1, 3, 6);               // pin 3 = step, pin 6 = direction
AccelStepper Zaxis(1, 4, 7);               // pin 4 = step, pin 7 = direction

void setup() {
  pinMode(enPin, OUTPUT);
  digitalWrite(enPin, LOW);

  
  //Max Speeds for Steppers 
  Xaxis.setMaxSpeed(4000);
  Yaxis.setMaxSpeed(400);
  Zaxis.setMaxSpeed(300);
  
  //Set Acceleration for Steppers
  Xaxis.setAcceleration(5000.0);
  Yaxis.setAcceleration(1000.0);
  Zaxis.setAcceleration(1000.0);

  
  //Set Speeds for Steppers 
  Xaxis.setSpeed(2000);
  Yaxis.setSpeed(400);
  Zaxis.setSpeed(100);
  
  pinMode(home_switchX, INPUT_PULLUP);     //Set home switch X to input
  pinMode(home_switchY, INPUT_PULLUP);     //Set home switch Y to input

  //Set DC motor Pins to Outputs 
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(ENA, OUTPUT);

  while (digitalRead(home_switchX)) {         // Make the Stepper move CW until the switch is activated
    Xaxis.moveTo(initial_homingX);            // Set the position to move to
    initial_homingX ++;                       // Increase by 1 for next move if needed
    Xaxis.run();                              // Start moving the stepper
    delay(1);
  }

  delay(3000);
  Xaxis.setCurrentPosition(0);

  while (digitalRead(home_switchY)) {        // Make the Stepper move CCW until the switch is activated
    Yaxis.moveTo(initial_homingY);           // Set the position to move to
    initial_homingY --;                       // Decrease by 1 for next move if needed
    Yaxis.run();                            // Start moving the stepper
    delay(1);
  }

  delay(3000);
  Yaxis.setCurrentPosition(0);
}


void loop() {
  Xaxis.runToNewPosition(-100);             //Move X off of sensor
  Yaxis.runToNewPosition(1500);             //Move Y to Middle of movement 1500 steeps
  slowload();                               //turn on spindle to slow
  delay(loadtime);                          //delay for time it takes to load jar
  Xaxis.runToNewPosition(-17000);           //Ready To sand Position
  delay(1000);
  acceleratespindle();                      //Spindle to jar sanding speed
  Zaxis.runToNewPosition(-100);
  //first run
  Xaxis.runToNewPosition(-21350);           //Move X to sanding position
  delay(sandtime);
  Yaxis.setSpeed(20);                       //Set Y axis Speed
  
  //One Sweep
  Yaxis.runToNewPosition(2200);             // +700 Y away from base
  delay(sand);
  Yaxis.runToNewPosition(800);              // -700 Y close to base
  delay(sand);
  Yaxis.runToNewPosition(1500);             // Y middle
  delay(sand);
  Zaxis.runToNewPosition(-200);              // More sandpaper
  
  //Two Sweep
  Yaxis.runToNewPosition(2400);             // +900 Y away from base
  delay(sand);
  Yaxis.runToNewPosition(600);              // -900 Y close to base
  delay(sand);
  Yaxis.runToNewPosition(1500);             // Y middle
  delay(sand);
  Zaxis.runToNewPosition(-300);              // More sandpaper
  
  //Three Sweep
  Yaxis.runToNewPosition(2600);             // +1100 Y away from base
  delay(sand);
  Yaxis.runToNewPosition(400);              // -1100 Y close to base
  delay(sand);
  Yaxis.runToNewPosition(1500);             // Y middle
  delay(sand);
  Zaxis.runToNewPosition(-400);              // More sandpaper

  //Four Sweep
  Yaxis.runToNewPosition(2700);             // +1200 Y away from base
  delay(sand);
  Yaxis.runToNewPosition(300);              // -1200 Y close to base
  delay(sand);
  Yaxis.runToNewPosition(1500);             // Y middle
  delay(sand);
  Zaxis.runToNewPosition(-500);              // More sandpaper
  
  //Five Sweep
  Yaxis.runToNewPosition(2800);             // +1300 Y away from base
  delay(sand);
  Yaxis.runToNewPosition(200);              // -1300 Y close to base
  delay(sand);
  Yaxis.runToNewPosition(1500);             // Y middle
  delay(sand);
  Zaxis.runToNewPosition(-600);              // More sandpaper
  
  //Six Sweep
  Yaxis.runToNewPosition(1700);             // +200 Y away from base
  delay(sand);
  Yaxis.runToNewPosition(1300);            // -200 Y close to base
  delay(sand);
  Yaxis.runToNewPosition(1500);             // Y middle
  delay(sand);
  Zaxis.runToNewPosition(-700);              // More sandpaper

  //Seven Sweep Inside edge Final Pass
  Xaxis.runToNewPosition(-19000);           //Move Back
  Yaxis.runToNewPosition(50);               // -1450 Y close to base
  Xaxis.runToNewPosition(-21250);           //Move To Sand Position
  delay(sand);
  Zaxis.runToNewPosition(-750);
  Yaxis.runToNewPosition(200);
  delay(sand);
  Zaxis.runToNewPosition(-800);
  Yaxis.runToNewPosition(50);
  delay(sand);
  Zaxis.runToNewPosition(-900);
  Yaxis.runToNewPosition(0);
  delay(sand);
  
  

  
  
  //unload jar
  deacceleratespindle();
  Xaxis.runToNewPosition(-100);           //Unload/load Position X axis
  Zaxis.setCurrentPosition(0);
    acceleratespindle();
    delay(2000);
    brake();
    delay(1000);
}


 //Spindle Run Loop
void acceleratespindle() {
  // Turn on motors CW
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);

  // Accelerate from zero to maximum speed
  for (int i = 50; i < 256; i++) {
    analogWrite(ENA, i);
    delay(10);
  }
}  
void deacceleratespindle() {
    // Turn on motors CW
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  
  // Decelerate from maximum speed to zero
	for (int i = 255; i >= 50; --i) {
		analogWrite(ENA, i);
		delay(10);
	}
}

void slowload() {
  // Turn on motors CW
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);

  // Accelerate from zero to maximum speed
  for (int i = 0; i < 50; i++) {
    analogWrite(ENA, i);
    delay(10);
  }
}  

void brake() {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  analogWrite(ENA, 150);
}
